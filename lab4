#include <string.h>
#include <iostream>

using namespace std;

class Alpha
{
    private:
    	unsigned bin;
    public:
    	Alpha(char*);
    	Alpha(){bin = 0;};
    	Alpha(const Alpha& y){bin = y.bin;};
    	Alpha& operator=(const Alpha& y){bin = y.bin;
    	 return *this;}
    	Alpha operator*(Alpha&);
    	operator char*();
    	friend ostream& operator<<(ostream&,Alpha&);
};

Alpha::Alpha(char*s)
{
	bin = 0;
	while(*s)
	{
		char k = *s;
		bin |= (1<<(25-(tolower(k)-'a')));
		s++;
	}
}

Alpha::operator char*()
{
	static char s[32];
	unsigned b = bin;
	int i = 0;
	int j = 0;
	bzero(s,32);
	while(b > 0)
	{
		if(b & 1)
			s[j++] = 'z'-i;
		i++;
		b >>= 1;
	}
	s[j] = '\0';
	return s;
}

ostream& operator<<(ostream& out,Alpha& z)
{
	unsigned  
	bit=1;
	int i;
	for(i=0; i<26;i++)
	{
	  if((z.bin& bit)>0)
		out<<(char)('z'-i);
	  bit=bit<<1;
    }
    return out;
}
Alpha Alpha::operator*(Alpha& p)
{
	Alpha l;
	l.bin = bin & p.bin;
	return l;
}

int main(int argc,char* argv[])
{
	static char* s[2];
	s[0] = (argc > 1)?argv[1]:(char*)" ";
	s[1] = (argc > 2)?argv[2]:(char*)" ";
	Alpha x(s[0]);
	Alpha y(s[1]);
	Alpha z;
	z = x*y;
	cout << z << endl;
}
