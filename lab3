#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <iostream>

using namespace std;

int euclide(int,int);

class Fraction 
{
  private:
    int nom; 
    int den; 
  public:
    Fraction(char*);
    Fraction(int n=0, int m=1) : nom(n), den(m) {};
	  int operator!=(Fraction);
    operator char*();
    void reduce();
    int getden(){return den;}
};

Fraction::Fraction(char* s) 
{
  char* p = strchr(s, '/'); 
  den = 1; 
  if(p != NULL) 
  {
    *p++ = '\0'; 
    den = atoi(p);
  }
  nom = atoi(s); 
}

int Fraction::operator!=(Fraction y)
{
	int sign;
	return ((nom*y.den)!=(y.nom*den))?sign = 1:sign = 0;
}

Fraction::operator char* () 
{
  static char s[32]; 
  sprintf(s, "%d/%d", nom, den);
  return s;
} 

void Fraction::reduce() 
{
  int nod;
  nod = euclide(abs(nom), den);
  nom /= nod; 
  den /= nod; 
  return; 
}

int euclide(int n, int m) 
{
  int r = 1; 
  while(n != 0) 
  {
    r = m % n; 
    m = n; 
    n = r; 
  } 
  return(m); 
} 

int main(int argc, char* argv[]) 
{
  if(argc < 3) 
   return(puts("Usage: complement nomerator/denomerator"));
  
  Fraction x(argv[1]); 
  Fraction y(argv[2]);

  if(x.getden() * y.getden() == 0)
    return(puts("Divide on zero"));
  
  Fraction x1(x); 
  Fraction y1(y);
  
  x1.reduce();  y1.reduce();
  int c = x1!=y1;
  switch(c){
    case 1 : cout << (char*)x << "!=";
             cout << (char*)y << endl;
             break;
    case 0 : cout << (char*)x << "=";
             cout << (char*)y << endl;
             break;
  }
  return(0); 
}
